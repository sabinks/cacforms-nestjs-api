generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int            @id @default(autoincrement())
    email             String         @unique
    name              String
    password          String
    emailVerifiedAt   String?
    verificationToken String?
    resetPassword     ResetPassword?
    isActive          Boolean?       @default(false)
    userRole          UserRole[]
    createdAt         String?
    updatedAt         String?
}

model ResetPassword {
    id        Int     @id @default(autoincrement())
    userId    Int     @unique
    token     String  @default("")
    user      User    @relation(fields: [userId], references: [id])
    tokenUsed Boolean @default(false)
}

model Role {
    id       Int        @id @default(autoincrement())
    name     String     @unique
    userRole UserRole[]
}

model UserRole {
    user   User @relation(fields: [userId], references: [id])
    userId Int

    role   Role @relation(fields: [roleId], references: [id])
    roleId Int

    @@id([userId, roleId])
}

model Locations {
    id                 Int                  @id @default(autoincrement())
    name               String
    address            String
    shortName          String
    createdAt          String
    updatedAt          String
    ShortCourseBooking ShortCourseBooking[]
}

model ShortCourse {
    id                 Int                  @id @default(autoincrement())
    name               String
    courseCode         String
    practicalDuration  String
    currency           String               @default("AUD")
    remark             String?
    imageName          String?
    imagePath          String?
    createdAt          String
    updatedAt          String
    isActive           Boolean              @default(false)
    shortCourseBooking ShortCourseBooking[]
}

model ShortCourseBooking {
    id              Int         @id @default(autoincrement())
    shortCourseId   Int
    locationId      Int
    location        Locations   @relation(fields: [locationId], references: [id])
    bookingDatetime String
    price           Decimal     @db.Decimal(6, 2)
    isActive        Boolean     @default(false)
    createdBy       Int
    updatedBy       Int
    createdAt       String
    updatedAt       String
    shortCourse     ShortCourse @relation(fields: [shortCourseId], references: [id])
    booking         Booking[]

    // @@map("short_course_booking")
}

model Booking {
    id                   Int                 @id @default(autoincrement())
    firstName            String
    lastName             String
    middleName           String
    email                String
    dob                  String
    gender               String
    usi                  String
    mobile               String
    phone                String?
    shortCourseBookId    Int
    pi                   String
    pm                   String
    data                 Json?
    documentType         String              @default("Other Documents")
    createdAt            String
    updatedAt            String
    ShortCourseBooking   ShortCourseBooking? @relation(fields: [shortCourseBookingId], references: [id])
    shortCourseBookingId Int?

    bookingDocument BookingDocument[]
}

model BookingDocument {
    id           Int     @id @default(autoincrement())
    bookingId    Int
    originalName String
    imageName    String?
    imagePath    String?
    Booking      Booking @relation(fields: [bookingId], references: [id])
}
